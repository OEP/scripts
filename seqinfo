#!/usr/bin/env python

"""
  Try to output useful stuff to know about a sequence of frames.

  Output should be useful for piping into other utilities.
"""

import sys
import string
import optparse

__author__ = "Paul Kilgo"

LOG_LABELS = ["debug", "info", "warn", "error"]
LOG_LEVEL = 0

MODE_INFO = 1
MODE_MISSING = 2

class Sequence:
  def __init__(self, fparts):
    self._name = construct_seqname(fparts)
    self._base = fparts[0]
    self._ext = fparts[2]
    self._maxframe = int(fparts[1])
    self._minframe = int(fparts[1])
    self._frameset = set([int(fparts[1])])
    self._framepad = len(fparts[1])

  def _assert_belongs(self, fparts):
    if fparts[0] != self.get_base():
      raise ValueError("sequence names do not match: want `%s` got `%s`" % \
        (self.get_name(), fparts[0]))
    if len(fparts[1]) != self.get_framepad():
      raise ValueError("frame pads do not match: want `%d` got `%d`" % \
        (self.get_framepad(), len(fparts[1])))
    if fparts[2] != self.get_ext():
      raise ValueError("extensions do not match: want `%s` got `%s`" % \
        (self.get_ext(), fparts[2]))

  def add_frame(self, fparts):
    self._assert_belongs(fparts)
    frame = int(fparts[1])
    self._frameset |= set([frame])
    self._maxframe = max(self._maxframe, frame)
    self._minframe = min(self._minframe, frame)

  def get_name(self): return self._name

  def get_base(self): return self._base

  def get_framepad(self): return self._framepad

  def get_ext(self): return self._ext

  def get_minframe(self): return self._minframe

  def get_maxframe(self): return self._maxframe

  def get_missing(self):
    return set(range(self._minframe, self._maxframe+1)) - self._frameset

  def get_framepad_format(self):
    return "%%0%dd" % self._framepad

  def pad_frame(self, frame):
    return self.get_framepad_format() % frame

  def count_missing(self):
    return len(self.get_missing())
    

def printUsage():
  print("Usage: %s <frame1> <frame2>..." % sys.argv[0])

def splitAll(filenames):
  return map(lambda x: string.rsplit(x, ".", 2), filenames)

def log(loglevel, message):
  if loglevel >= LOG_LEVEL:
    loglevel = min(loglevel, len(LOG_LABELS) - 1)
    print "%s: %s" % (LOG_LABELS[loglevel], message)

def warn(msg):
  log(2, msg)

def construct_seqname(fparts):
  return "%s.%s" % (fparts[0], fparts[2])

def fetch_seqinfos(filenames):
  seqinfos = dict()
  for fparts in splitAll(filenames):
    if len(fparts) != 3:
      warn(".".join(fparts) + " does not follow proper filename format")
      continue

    filename = ".".join(fparts)
    seqname = construct_seqname(fparts) 
    seqinfo = seqinfos.setdefault(seqname, Sequence(fparts))

    seqinfo.add_frame(fparts)
  return seqinfos

def print_missing_frames(seqinfos):
  multiple = len(seqinfos) > 1

  for (seqname, seqinfo) in seqinfos.items():
    for i in seqinfo.get_missing():
      if multiple:
        print ("%s: " + seqinfo.get_framepad_format()) % (seqname, i)
      else:
        print seqinfo.pad_frame(i)

def print_summary(seqinfo, indent=0):
  pad = " " * indent
  print "%s" % seqinfo.get_name()
  print "%sFirst frame: %d" % (pad, seqinfo.get_minframe())
  print "%sLast frame: %d" % (pad, seqinfo.get_maxframe())
  print "%sMissing frames: %d" % (pad, seqinfo.count_missing())

def print_summaries(seqinfos):
  indent = 2
  for (name, seqinfo) in seqinfos.items():
    print_summary(seqinfo, indent)


def main():
  parser = get_argparser()
  (parsed, args) = parser.parse_args(sys.argv[1:])

  if len(args) == 0:
    print "error: no frames provided"
    parser.print_help()
    sys.exit(1)

  seqinfos = fetch_seqinfos(args)

  if parsed.mode == MODE_MISSING:
    print_missing_frames(seqinfos)
  else:
    print_summaries(seqinfos)

def get_argparser():
  parser = optparse.OptionParser(
    description='Print information about a sequence of images.')
  parser.add_option('-m', '--print-missing', action='store_const',
    dest='mode', const=MODE_MISSING,
    help='print missing frames in frame sequence')

  return parser


if __name__ == "__main__":
  main()
